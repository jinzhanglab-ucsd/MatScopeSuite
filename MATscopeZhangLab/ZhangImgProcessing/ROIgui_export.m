function varargout = ROIgui_export(varargin)
% global mmc
% ROIGUI_EXPORT MATLAB code for ROIgui_export.fig
%      ROIGUI_EXPORT, by itself, creates a new ROIGUI_EXPORT or raises the existing
%      singleton*.
%
%      H = ROIGUI_EXPORT returns the handle to a new ROIGUI_EXPORT or the handle to
%      the existing singleton*.
%
%      ROIGUI_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in ROIGUI_EXPORT.M with the given input arguments.
%
%      ROIGUI_EXPORT('Property','Value',...) creates a new ROIGUI_EXPORT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ROIgui_export_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ROIgui_export_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ROIgui_export

% Last Modified by GUIDE v2.5 15-Jan-2016 13:28:24

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ROIgui_export_OpeningFcn, ...
                   'gui_OutputFcn',  @ROIgui_export_OutputFcn, ...
                   'gui_LayoutFcn',  @ROIgui_export_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before ROIgui_export is made visible.
function ROIgui_export_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to ROIgui_export (see VARARGIN)

% Choose default command line output for ROIgui_export
handles.output = hObject;
% micromanager core handle 
Scp = varargin{1};
handles.core = Scp.mmc; 
handles.MMgui = Scp.gui;
% Update handles structure
guidata(hObject, handles);

% This sets up the initial plot - only do when we are invisible
% so window can get raised using ROIgui_export.
if strcmp(get(hObject,'Visible'),'off')
    plot(rand(5));
end



% UIWAIT makes ROIgui_export wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = ROIgui_export_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

% --- Executes on button press in newROI.
function newROI_Callback(hObject, eventdata, handles)
% hObject    handle to newROI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% axes(handles.axes1);
% cla;
% 
% popup_sel_index = get(handles.popupmenu1, 'Value');
% switch popup_sel_index
%     case 1
%         plot(rand(5));
%     case 2
%         plot(sin(1:0.01:25.99));
%     case 3
%         bar(1:.5:10);
%     case 4
%         plot(membrane);
%     case 5
%         surf(peaks);
% end

button  = 1;

xv =[];
yv=[];
hold on;
getPolyToggle = get(handles.polyToggle,'Value');
if getPolyToggle==1
    typeOpt = 'Poly';
else
    typeOpt = 'Rect';
end
switch typeOpt
    case 'Poly'
        while button == 1
            [xin,yin,button]=ginput(1);
            xv = [xv,round(xin)];
            yv = [yv,round(yin)];
            if length(xv)>1
                set(hp,'XData',xv,'YData',yv)
                %         plot(xv(end-1:end),yv(end-1:end),'r-*','LineWidth',2)
            elseif length(xv)==1
                hp = plot(xv(end),yv(end),'r-*','LineWidth',2);
            end
            
        end
    case 'Rect'
        [xin,yin,button]=ginput(1);
        xv = round(xin);
        yv = round(yin);
        hp = plot(xv,yv,'r-*','LineWidth',2);
        [xin,yin,button]=ginput(1);
        xin = round(xin);
        yin = round(yin);
        xv = [xv, xv, xin, xin];
        yv = [yv, yin, yin, yv];
        set(hp,'XData',xv,'YData',yv)
end
xv = [xv,xv(1)];
yv = [yv,yv(1)];
set(hp,'XData',xv,'YData',yv)
% plot(xv([1,end]),yv([1,end]),'r-*','LineWidth',2)
% testrand = round(rand()*100);
contents = get(handles.listbox1,'String');

if strcmp(contents,'<no ROI>')
    nextHandle='ROI 1';
    set(handles.listbox1,'String',nextHandle)
else
    if iscell(contents)
        nStr = length(contents);
        nextHandle=['ROI ',num2str(nStr+1)];
        contents{nStr+1} = nextHandle;
    else
        nextHandle='ROI 2';
        contents = {contents,nextHandle};
    end
    set(handles.listbox1,'String',contents)
end
roiMat = [xv',yv'];
if isstruct(handles.newROI.UserData)
    roiStruct = handles.newROI.UserData;
    nEntries = length(roiStruct);
    roiStruct(nEntries+1).names =  nextHandle;
    roiStruct(nEntries+1).roiMatrix =  roiMat;
    roiStruct(nEntries+1).plotH =  hp;
else
    roiStruct = struct('names',nextHandle,'roiMatrix',roiMat,'plotH',hp);
end
handles.newROI.UserData=roiStruct;
% set(handles.listbox1,'String',num2str(testrand))


% --------------------------------------------------------------------
function FileMenu_Callback(hObject, eventdata, handles)
% hObject    handle to FileMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function OpenMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to OpenMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
file = uigetfile('*.fig');
if ~isequal(file, 0)
    open(file);
end

% --------------------------------------------------------------------
function PrintMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to PrintMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
printdlg(handles.figure1)

% --------------------------------------------------------------------
function CloseMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to CloseMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
selection = questdlg(['Close ' get(handles.figure1,'Name') '?'],...
                     ['Close ' get(handles.figure1,'Name') '...'],...
                     'Yes','No','Yes');
if strcmp(selection,'No')
    return;
end

delete(handles.figure1)


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
     set(hObject,'BackgroundColor','white');
end

set(hObject, 'String', {'plot(rand(5))', 'plot(sin(1:0.01:25))', 'bar(1:.5:10)', 'plot(membrane)', 'surf(peaks)'});


% --- Executes on selection change in listbox1.
function listbox1_Callback(hObject, eventdata, handles)
% hObject    handle to listbox1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns listbox1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox1

index_selected = get(handles.listbox1,'Value');
allStr= get(handles.listbox1,'String');
ROIstruct = handles.newROI.UserData;
ROIstr =  {ROIstruct.names};
Ind = strcmp(allStr(index_selected),ROIstr);

htoCh = ROIstruct(Ind).plotH;
set(htoCh,'Color',[0 0 1])
hnoCh = {ROIstruct(~strcmp(allStr(index_selected),ROIstr)).plotH};
for k = 1:length(hnoCh)
    set(hnoCh{k},'Color',[1 0 0]);
end
hbkgr = ROIstruct(strcmp('Background',ROIstr)).plotH;
if hbkgr ~= htoCh
    set(hbkgr,'Color',[0 1 0]);
end

% --- Executes during object creation, after setting all properties.
function listbox1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in snapButton.
function snapButton_Callback(hObject, eventdata, handles)
% hObject    handle to snapButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% global mmc
mmc = handles.core;
axes(handles.axes1);
cla;

mmc.snapImage();                    %Take the image
img=mmc.getImage();                 %Retrieve Image
width=mmc.getImageWidth();          %Get width and height for reshaping
height=mmc.getImageHeight();
if mmc.getBytesPerPixel==2
    pixelType='uint16';
else
    pixelType='uint8';
end
img=typecast(img,pixelType);        %Cast
img=reshape(img, [width, height]);
img=transpose(img);
imshow(img);                     %Draw to axes with autoscale


% --- Executes on button press in delROI.
function delROI_Callback(hObject, eventdata, handles)
% hObject    handle to delROI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

index_selected = get(handles.listbox1,'Value');
allStr= get(handles.listbox1,'String');
ROIstruct = handles.newROI.UserData;
ROIstr =  {ROIstruct.names};
Ind = strcmp(allStr(index_selected),ROIstr);

htoDel = ROIstruct(Ind).plotH;
delete(htoDel);
ROIstruct(Ind) = [];
handles.newROI.UserData =ROIstruct;
set(handles.listbox1,'Value',1);
set(handles.listbox1,'String', allStr(~Ind));


% --- Executes on button press in bkgrROI.
function bkgrROI_Callback(hObject, eventdata, handles)
% hObject    handle to bkgrROI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

button  = 1;

xv =[];
yv=[];
hold on;
getPolyToggle = get(handles.polyToggle,'Value');
if getPolyToggle==1
    typeOpt = 'Poly';
else
    typeOpt = 'Rect';
end
switch typeOpt
    case 'Poly'
        while button == 1
            [xin,yin,button]=ginput(1);
            xv = [xv,round(xin)];
            yv = [yv,round(yin)];
            if length(xv)>1
                set(hp,'XData',xv,'YData',yv)
                %         plot(xv(end-1:end),yv(end-1:end),'r-*','LineWidth',2)
            elseif length(xv)==1
                hp = plot(xv(end),yv(end),'g-*','LineWidth',2);
            end
            
        end
        xv = [xv,xv(1)];
        yv = [yv,yv(1)];
    case 'Rect'
        [xin,yin,button]=ginput(1);
        xv = round(xin);
        yv = round(yin);
        hp = plot(xv,yv,'g-*','LineWidth',2);
        [xin,yin,button]=ginput(1);
        xin = round(xin);
        yin = round(yin);
        xv = [xv, xv, xin, xin, xv];
        yv = [yv, yin, yin, yv, yv];
        set(hp,'XData',xv,'YData',yv)
end
set(hp,'XData',xv,'YData',yv)
% plot(xv([1,end]),yv([1,end]),'r-*','LineWidth',2)
% testrand = round(rand()*100);

roiMat = [xv',yv'];

if isstruct(handles.newROI.UserData)
    contents = get(handles.listbox1,'String');
    roiStruct = handles.newROI.UserData;
    ROIstr =  {roiStruct.names};
    Ind = find(strcmp('Background',ROIstr)==1);
    if ~isempty(Ind)
        oldH = roiStruct(Ind).plotH;
        delete(oldH);
%         roiStruct(Ind).names =  'Background';
        roiStruct(Ind).roiMatrix =  roiMat;
        roiStruct(Ind).plotH =  hp;
    else
        nEntries = length(roiStruct);
        roiStruct(nEntries+1).names =  'Background';
        roiStruct(nEntries+1).roiMatrix =  roiMat;
        roiStruct(nEntries+1).plotH =  hp;
        if iscell(contents)
            contents{nEntries+1} = 'Background';
        else
            contents = {contents,'Background'};
        end
        set(handles.listbox1,'String',contents)
    end
else
    roiStruct = struct('names','Background','roiMatrix',roiMat,'plotH',hp);
    set(handles.listbox1,'String','Background')
end

handles.newROI.UserData=roiStruct;


% --- Executes on button press in rectToggle.
function rectToggle_Callback(hObject, eventdata, handles)
% hObject    handle to rectToggle (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of rectToggle
set(handles.polyToggle,'Value',0)


% --- Executes on button press in polyToggle.
function polyToggle_Callback(hObject, eventdata, handles)
% hObject    handle to polyToggle (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of polyToggle
set(handles.rectToggle,'Value',0)


% --- Executes on button press in endButton.
function endButton_Callback(hObject, eventdata, handles)
% hObject    handle to endButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

assignin('base','ROIstuct',handles.newROI.UserData)
close(gcf);


% --- Executes on button press in liveButton.
function liveButton_Callback(hObject, eventdata, handles)
% hObject    handle to liveButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.MMgui.enableLiveMode(1);


% --- Creates and returns a handle to the GUI figure. 
function h1 = ROIgui_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'axes', 2, ...
    'popupmenu', 2, ...
    'pushbutton', 7, ...
    'listbox', 2, ...
    'togglebutton', 3, ...
    'uipanel', 2), ...
    'override', 0, ...
    'release', [], ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastFilename', 'F:\eGreenwald\AnalysisCode\ImgProcessing\ROIgui.fig', ...
    'lastSavedFile', 'F:\eGreenwald\AnalysisCode\ImgProcessing\ROIgui_export.m');
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'Units',get(0,'defaultfigureUnits'),...
'Position',[644 -205 795 542],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'IntegerHandle','off',...
'MenuBar','none',...
'Name','ROI select',...
'NumberTitle','off',...
'Resize','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'ScreenPixelsPerInchMode','manual',...
'ChildrenMode','manual',...
'ParentMode','manual',...
'HandleVisibility','callback',...
'Tag','figure1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axes1';

h2 = axes(...
'Parent',h1,...
'FontUnits','normalized',...
'Units',get(0,'defaultaxesUnits'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode','manual',...
'CameraTarget',[0.5 0.5 0.5],...
'CameraUpVector',get(0,'defaultaxesCameraUpVector'),...
'CameraViewAngle',get(0,'defaultaxesCameraViewAngle'),...
'Projection',get(0,'defaultaxesProjection'),...
'AmbientLightColor',get(0,'defaultaxesAmbientLightColor'),...
'Position',[0.033112582781457 0.0585480093676815 0.662251655629139 0.765807962529274],...
'ActivePositionProperty','position',...
'LooseInset',[0.13 0.11 0.095 0.075],...
'WarpToFill','off',...
'WarpToFillMode',get(0,'defaultaxesWarpToFillMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'DataAspectRatio',get(0,'defaultaxesDataAspectRatio'),...
'PlotBoxAspectRatio',get(0,'defaultaxesPlotBoxAspectRatio'),...
'FontName',get(0,'defaultaxesFontName'),...
'FontSize',0.090702947845805,...
'FontAngle',get(0,'defaultaxesFontAngle'),...
'FontWeight',get(0,'defaultaxesFontWeight'),...
'FontSmoothing',get(0,'defaultaxesFontSmoothing'),...
'TickLabelInterpreter',get(0,'defaultaxesTickLabelInterpreter'),...
'XLim',get(0,'defaultaxesXLim'),...
'YLim',get(0,'defaultaxesYLim'),...
'ZLim',get(0,'defaultaxesZLim'),...
'XDir',get(0,'defaultaxesXDir'),...
'YDir',get(0,'defaultaxesYDir'),...
'ZDir',get(0,'defaultaxesZDir'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'CLim',get(0,'defaultaxesCLim'),...
'ALim',get(0,'defaultaxesALim'),...
'ColorOrderIndex',get(0,'defaultaxesColorOrderIndex'),...
'LineStyleOrder',get(0,'defaultaxesLineStyleOrder'),...
'LineStyleOrderIndex',get(0,'defaultaxesLineStyleOrderIndex'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'TickDir',get(0,'defaultaxesTickDir'),...
'Layer',get(0,'defaultaxesLayer'),...
'TitleMode','manual',...
'TickLength',get(0,'defaultaxesTickLength'),...
'GridLineStyle',get(0,'defaultaxesGridLineStyle'),...
'MinorGridLineStyle',get(0,'defaultaxesMinorGridLineStyle'),...
'MinorGridColor',get(0,'defaultaxesMinorGridColor'),...
'XRulerMode',get(0,'defaultaxesXRulerMode'),...
'XAxisLocation',get(0,'defaultaxesXAxisLocation'),...
'XTick',[0 0.2 0.4 0.6 0.8 1],...
'XTickLabelRotation',get(0,'defaultaxesXTickLabelRotation'),...
'XLabelMode','manual',...
'XScale',get(0,'defaultaxesXScale'),...
'XTickLabel',{  '0  '; '0.2'; '0.4'; '0.6'; '0.8'; '1  ' },...
'XTickLabelsMode','manual',...
'XMinorTick',get(0,'defaultaxesXMinorTick'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YRulerMode',get(0,'defaultaxesYRulerMode'),...
'YAxisLocation',get(0,'defaultaxesYAxisLocation'),...
'YTick',[0 0.2 0.4 0.6 0.8 1],...
'YTickLabelRotation',get(0,'defaultaxesYTickLabelRotation'),...
'YLabelMode','manual',...
'YScale',get(0,'defaultaxesYScale'),...
'YTickLabel',{  '0  '; '0.2'; '0.4'; '0.6'; '0.8'; '1  ' },...
'YTickLabelsMode','manual',...
'YMinorTick',get(0,'defaultaxesYMinorTick'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
'ZTick',[0 0.5 1],...
'ZTickLabelRotation',get(0,'defaultaxesZTickLabelRotation'),...
'ZLabelMode','manual',...
'ZScale',get(0,'defaultaxesZScale'),...
'ZTickLabel',blanks(0),...
'ZMinorTick',get(0,'defaultaxesZMinorTick'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'BoxStyle',get(0,'defaultaxesBoxStyle'),...
'LineWidth',get(0,'defaultaxesLineWidth'),...
'Color',get(0,'defaultaxesColor'),...
'Clipping',get(0,'defaultaxesClipping'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'NextPlot',get(0,'defaultaxesNextPlot'),...
'SortMethod','childorder',...
'TitleFontWeight',get(0,'defaultaxesTitleFontWeight'),...
'TitleFontSizeMultiplier',get(0,'defaultaxesTitleFontSizeMultiplier'),...
'LabelFontSizeMultiplier',get(0,'defaultaxesLabelFontSizeMultiplier'),...
'ClippingStyle',get(0,'defaultaxesClippingStyle'),...
'XGrid',get(0,'defaultaxesXGrid'),...
'XMinorGrid',get(0,'defaultaxesXMinorGrid'),...
'YGrid',get(0,'defaultaxesYGrid'),...
'YMinorGrid',get(0,'defaultaxesYMinorGrid'),...
'ZGrid',get(0,'defaultaxesZGrid'),...
'ZMinorGrid',get(0,'defaultaxesZMinorGrid'),...
'Box',get(0,'defaultaxesBox'),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','axes1',...
'UserData',[],...
'SelectedMode','manual',...
'SelectionHighlight',get(0,'defaultaxesSelectionHighlight'),...
'HitTest',get(0,'defaultaxesHitTest'),...
'PickableParts',get(0,'defaultaxesPickableParts'),...
'ChildrenMode','manual',...
'ParentMode','manual',...
'Visible',get(0,'defaultaxesVisible'),...
'HandleVisibility',get(0,'defaultaxesHandleVisibility'));

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500000667572022 1.00602409638554 0.499999999999998],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), ''} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag',blanks(0),...
'UserData',[],...
'SelectionHighlight','on',...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.143441790941423 0],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), ''} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag',blanks(0),...
'UserData',[],...
'SelectionHighlight','on',...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','on',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.161915686164688 0.500000476837158 0],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), ''} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag',blanks(0),...
'UserData',[],...
'SelectionHighlight','on',...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','on',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontSize',10.9251700680272,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'newROI';

h7 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'ListboxTop',0,...
'String','New ROI',...
'Position',[0.740880503144654 0.874538745387454 0.240251572327044 0.105166051660517],...
'BackgroundColor',[0.831 0.816 0.784],...
'Callback',@(hObject,eventdata)ROIgui_export('newROI_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','newROI',...
'UserData',[]);

appdata = [];
appdata.lastValidTag = 'listbox1';

h8 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','<no ROI>',...
'Style','listbox',...
'Value',1,...
'ValueMode',get(0,'defaultuicontrolValueMode'),...
'Position',[124.6 15.4615384615385 28.4 15.4615384615385],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)ROIgui_export('listbox1_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)ROIgui_export('listbox1_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','listbox1');

appdata = [];
appdata.lastValidTag = 'snapButton';

h9 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Snap',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[9.8 36.3076923076923 26.4 3.69230769230769],...
'Callback',@(hObject,eventdata)ROIgui_export('snapButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','snapButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'delROI';

h10 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Delete ROI',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[119.8 10.0769230769231 33.2 3.76923076923077],...
'Callback',@(hObject,eventdata)ROIgui_export('delROI_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','delROI',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'bkgrROI';

h11 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Background ROI',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[117.6 31.8461538461538 36.4 3],...
'Callback',@(hObject,eventdata)ROIgui_export('bkgrROI_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','bkgrROI',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'uipanel1';

h12 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'Title','ROI Style',...
'Position',[84 35.5384615384615 25.8 4.38461538461539],...
'ParentMode','manual',...
'Tag','uipanel1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'rectToggle';

h13 = uicontrol(...
'Parent',h12,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Rect.',...
'Style','togglebutton',...
'Position',[2.2 0.461538461538462 10 2.69230769230769],...
'Callback',@(hObject,eventdata)ROIgui_export('rectToggle_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','rectToggle',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'polyToggle';

h14 = uicontrol(...
'Parent',h12,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Poly.',...
'Style','togglebutton',...
'Value',1,...
'Position',[13 0.538461538461539 10.2 2.61538461538462],...
'Callback',@(hObject,eventdata)ROIgui_export('polyToggle_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','polyToggle',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'endButton';

h15 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Return to Acq.',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[119.8 3.07692307692308 30.2 3.92307692307692],...
'Callback',@(hObject,eventdata)ROIgui_export('endButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','endButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'liveButton';

h16 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Show Live',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[52.6 36.3846153846154 20.6 3.15384615384615],...
'Callback',@(hObject,eventdata)ROIgui_export('liveButton_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','liveButton',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % ROIGUI_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % ROIGUI_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % ROIGUI_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % ROIGUI_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%     if feature('HGUsingMATLABClasses')
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
%     end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


